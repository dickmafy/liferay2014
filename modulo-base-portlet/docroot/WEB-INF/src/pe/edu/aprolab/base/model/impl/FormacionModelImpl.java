/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package pe.edu.aprolab.base.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import pe.edu.aprolab.base.model.Formacion;
import pe.edu.aprolab.base.model.FormacionModel;
import pe.edu.aprolab.base.model.FormacionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Formacion service. Represents a row in the &quot;BASE_Formacion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link pe.edu.aprolab.base.model.FormacionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FormacionImpl}.
 * </p>
 *
 * @author Jorge Loayza Soloisolo
 * @see FormacionImpl
 * @see pe.edu.aprolab.base.model.Formacion
 * @see pe.edu.aprolab.base.model.FormacionModel
 * @generated
 */
@JSON(strict = true)
public class FormacionModelImpl extends BaseModelImpl<Formacion>
	implements FormacionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a formacion model instance should use the {@link pe.edu.aprolab.base.model.Formacion} interface instead.
	 */
	public static final String TABLE_NAME = "BASE_Formacion";
	public static final Object[][] TABLE_COLUMNS = {
			{ "formacionId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "nombre", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table BASE_Formacion (formacionId LONG not null primary key,companyId LONG,nombre VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table BASE_Formacion";
	public static final String ORDER_BY_JPQL = " ORDER BY formacion.nombre ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BASE_Formacion.nombre ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.pe.edu.aprolab.base.model.Formacion"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.pe.edu.aprolab.base.model.Formacion"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.pe.edu.aprolab.base.model.Formacion"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long NOMBRE_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Formacion toModel(FormacionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Formacion model = new FormacionImpl();

		model.setFormacionId(soapModel.getFormacionId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setNombre(soapModel.getNombre());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Formacion> toModels(FormacionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Formacion> models = new ArrayList<Formacion>(soapModels.length);

		for (FormacionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.pe.edu.aprolab.base.model.Formacion"));

	public FormacionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _formacionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFormacionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _formacionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Formacion.class;
	}

	@Override
	public String getModelClassName() {
		return Formacion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("formacionId", getFormacionId());
		attributes.put("companyId", getCompanyId());
		attributes.put("nombre", getNombre());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long formacionId = (Long)attributes.get("formacionId");

		if (formacionId != null) {
			setFormacionId(formacionId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String nombre = (String)attributes.get("nombre");

		if (nombre != null) {
			setNombre(nombre);
		}
	}

	@JSON
	@Override
	public long getFormacionId() {
		return _formacionId;
	}

	@Override
	public void setFormacionId(long formacionId) {
		_formacionId = formacionId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public String getNombre() {
		if (_nombre == null) {
			return StringPool.BLANK;
		}
		else {
			return _nombre;
		}
	}

	@Override
	public void setNombre(String nombre) {
		_columnBitmask = -1L;

		_nombre = nombre;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Formacion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Formacion toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Formacion)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FormacionImpl formacionImpl = new FormacionImpl();

		formacionImpl.setFormacionId(getFormacionId());
		formacionImpl.setCompanyId(getCompanyId());
		formacionImpl.setNombre(getNombre());

		formacionImpl.resetOriginalValues();

		return formacionImpl;
	}

	@Override
	public int compareTo(Formacion formacion) {
		int value = 0;

		value = getNombre().compareTo(formacion.getNombre());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Formacion)) {
			return false;
		}

		Formacion formacion = (Formacion)obj;

		long primaryKey = formacion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FormacionModelImpl formacionModelImpl = this;

		formacionModelImpl._originalCompanyId = formacionModelImpl._companyId;

		formacionModelImpl._setOriginalCompanyId = false;

		formacionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Formacion> toCacheModel() {
		FormacionCacheModel formacionCacheModel = new FormacionCacheModel();

		formacionCacheModel.formacionId = getFormacionId();

		formacionCacheModel.companyId = getCompanyId();

		formacionCacheModel.nombre = getNombre();

		String nombre = formacionCacheModel.nombre;

		if ((nombre != null) && (nombre.length() == 0)) {
			formacionCacheModel.nombre = null;
		}

		return formacionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{formacionId=");
		sb.append(getFormacionId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", nombre=");
		sb.append(getNombre());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("pe.edu.aprolab.base.model.Formacion");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>formacionId</column-name><column-value><![CDATA[");
		sb.append(getFormacionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nombre</column-name><column-value><![CDATA[");
		sb.append(getNombre());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Formacion.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Formacion.class
		};
	private long _formacionId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private String _nombre;
	private long _columnBitmask;
	private Formacion _escapedModel;
}