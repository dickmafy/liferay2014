/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package pe.edu.aprolab.base.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import pe.edu.aprolab.base.model.Formacion;
import pe.edu.aprolab.base.service.FormacionLocalService;
import pe.edu.aprolab.base.service.persistence.FormacionPersistence;
import pe.edu.aprolab.base.service.persistence.InstitucionPersistence;
import pe.edu.aprolab.base.service.persistence.LocalPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the formacion local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link pe.edu.aprolab.base.service.impl.FormacionLocalServiceImpl}.
 * </p>
 *
 * @author Jorge Loayza Soloisolo
 * @see pe.edu.aprolab.base.service.impl.FormacionLocalServiceImpl
 * @see pe.edu.aprolab.base.service.FormacionLocalServiceUtil
 * @generated
 */
public abstract class FormacionLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements FormacionLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link pe.edu.aprolab.base.service.FormacionLocalServiceUtil} to access the formacion local service.
	 */

	/**
	 * Adds the formacion to the database. Also notifies the appropriate model listeners.
	 *
	 * @param formacion the formacion
	 * @return the formacion that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Formacion addFormacion(Formacion formacion)
		throws SystemException {
		formacion.setNew(true);

		return formacionPersistence.update(formacion);
	}

	/**
	 * Creates a new formacion with the primary key. Does not add the formacion to the database.
	 *
	 * @param formacionId the primary key for the new formacion
	 * @return the new formacion
	 */
	@Override
	public Formacion createFormacion(long formacionId) {
		return formacionPersistence.create(formacionId);
	}

	/**
	 * Deletes the formacion with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param formacionId the primary key of the formacion
	 * @return the formacion that was removed
	 * @throws PortalException if a formacion with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Formacion deleteFormacion(long formacionId)
		throws PortalException, SystemException {
		return formacionPersistence.remove(formacionId);
	}

	/**
	 * Deletes the formacion from the database. Also notifies the appropriate model listeners.
	 *
	 * @param formacion the formacion
	 * @return the formacion that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public Formacion deleteFormacion(Formacion formacion)
		throws SystemException {
		return formacionPersistence.remove(formacion);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(Formacion.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return formacionPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link pe.edu.aprolab.base.model.impl.FormacionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return formacionPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link pe.edu.aprolab.base.model.impl.FormacionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return formacionPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return formacionPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return formacionPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public Formacion fetchFormacion(long formacionId) throws SystemException {
		return formacionPersistence.fetchByPrimaryKey(formacionId);
	}

	/**
	 * Returns the formacion with the primary key.
	 *
	 * @param formacionId the primary key of the formacion
	 * @return the formacion
	 * @throws PortalException if a formacion with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Formacion getFormacion(long formacionId)
		throws PortalException, SystemException {
		return formacionPersistence.findByPrimaryKey(formacionId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return formacionPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the formacions.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link pe.edu.aprolab.base.model.impl.FormacionModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of formacions
	 * @param end the upper bound of the range of formacions (not inclusive)
	 * @return the range of formacions
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Formacion> getFormacions(int start, int end)
		throws SystemException {
		return formacionPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of formacions.
	 *
	 * @return the number of formacions
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getFormacionsCount() throws SystemException {
		return formacionPersistence.countAll();
	}

	/**
	 * Updates the formacion in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param formacion the formacion
	 * @return the formacion that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public Formacion updateFormacion(Formacion formacion)
		throws SystemException {
		return formacionPersistence.update(formacion);
	}

	/**
	 * Returns the formacion local service.
	 *
	 * @return the formacion local service
	 */
	public pe.edu.aprolab.base.service.FormacionLocalService getFormacionLocalService() {
		return formacionLocalService;
	}

	/**
	 * Sets the formacion local service.
	 *
	 * @param formacionLocalService the formacion local service
	 */
	public void setFormacionLocalService(
		pe.edu.aprolab.base.service.FormacionLocalService formacionLocalService) {
		this.formacionLocalService = formacionLocalService;
	}

	/**
	 * Returns the formacion remote service.
	 *
	 * @return the formacion remote service
	 */
	public pe.edu.aprolab.base.service.FormacionService getFormacionService() {
		return formacionService;
	}

	/**
	 * Sets the formacion remote service.
	 *
	 * @param formacionService the formacion remote service
	 */
	public void setFormacionService(
		pe.edu.aprolab.base.service.FormacionService formacionService) {
		this.formacionService = formacionService;
	}

	/**
	 * Returns the formacion persistence.
	 *
	 * @return the formacion persistence
	 */
	public FormacionPersistence getFormacionPersistence() {
		return formacionPersistence;
	}

	/**
	 * Sets the formacion persistence.
	 *
	 * @param formacionPersistence the formacion persistence
	 */
	public void setFormacionPersistence(
		FormacionPersistence formacionPersistence) {
		this.formacionPersistence = formacionPersistence;
	}

	/**
	 * Returns the institucion local service.
	 *
	 * @return the institucion local service
	 */
	public pe.edu.aprolab.base.service.InstitucionLocalService getInstitucionLocalService() {
		return institucionLocalService;
	}

	/**
	 * Sets the institucion local service.
	 *
	 * @param institucionLocalService the institucion local service
	 */
	public void setInstitucionLocalService(
		pe.edu.aprolab.base.service.InstitucionLocalService institucionLocalService) {
		this.institucionLocalService = institucionLocalService;
	}

	/**
	 * Returns the institucion remote service.
	 *
	 * @return the institucion remote service
	 */
	public pe.edu.aprolab.base.service.InstitucionService getInstitucionService() {
		return institucionService;
	}

	/**
	 * Sets the institucion remote service.
	 *
	 * @param institucionService the institucion remote service
	 */
	public void setInstitucionService(
		pe.edu.aprolab.base.service.InstitucionService institucionService) {
		this.institucionService = institucionService;
	}

	/**
	 * Returns the institucion persistence.
	 *
	 * @return the institucion persistence
	 */
	public InstitucionPersistence getInstitucionPersistence() {
		return institucionPersistence;
	}

	/**
	 * Sets the institucion persistence.
	 *
	 * @param institucionPersistence the institucion persistence
	 */
	public void setInstitucionPersistence(
		InstitucionPersistence institucionPersistence) {
		this.institucionPersistence = institucionPersistence;
	}

	/**
	 * Returns the local local service.
	 *
	 * @return the local local service
	 */
	public pe.edu.aprolab.base.service.LocalLocalService getLocalLocalService() {
		return localLocalService;
	}

	/**
	 * Sets the local local service.
	 *
	 * @param localLocalService the local local service
	 */
	public void setLocalLocalService(
		pe.edu.aprolab.base.service.LocalLocalService localLocalService) {
		this.localLocalService = localLocalService;
	}

	/**
	 * Returns the local remote service.
	 *
	 * @return the local remote service
	 */
	public pe.edu.aprolab.base.service.LocalService getLocalService() {
		return localService;
	}

	/**
	 * Sets the local remote service.
	 *
	 * @param localService the local remote service
	 */
	public void setLocalService(
		pe.edu.aprolab.base.service.LocalService localService) {
		this.localService = localService;
	}

	/**
	 * Returns the local persistence.
	 *
	 * @return the local persistence
	 */
	public LocalPersistence getLocalPersistence() {
		return localPersistence;
	}

	/**
	 * Sets the local persistence.
	 *
	 * @param localPersistence the local persistence
	 */
	public void setLocalPersistence(LocalPersistence localPersistence) {
		this.localPersistence = localPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("pe.edu.aprolab.base.model.Formacion",
			formacionLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"pe.edu.aprolab.base.model.Formacion");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return Formacion.class;
	}

	protected String getModelClassName() {
		return Formacion.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = formacionPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = pe.edu.aprolab.base.service.FormacionLocalService.class)
	protected pe.edu.aprolab.base.service.FormacionLocalService formacionLocalService;
	@BeanReference(type = pe.edu.aprolab.base.service.FormacionService.class)
	protected pe.edu.aprolab.base.service.FormacionService formacionService;
	@BeanReference(type = FormacionPersistence.class)
	protected FormacionPersistence formacionPersistence;
	@BeanReference(type = pe.edu.aprolab.base.service.InstitucionLocalService.class)
	protected pe.edu.aprolab.base.service.InstitucionLocalService institucionLocalService;
	@BeanReference(type = pe.edu.aprolab.base.service.InstitucionService.class)
	protected pe.edu.aprolab.base.service.InstitucionService institucionService;
	@BeanReference(type = InstitucionPersistence.class)
	protected InstitucionPersistence institucionPersistence;
	@BeanReference(type = pe.edu.aprolab.base.service.LocalLocalService.class)
	protected pe.edu.aprolab.base.service.LocalLocalService localLocalService;
	@BeanReference(type = pe.edu.aprolab.base.service.LocalService.class)
	protected pe.edu.aprolab.base.service.LocalService localService;
	@BeanReference(type = LocalPersistence.class)
	protected LocalPersistence localPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private FormacionLocalServiceClpInvoker _clpInvoker = new FormacionLocalServiceClpInvoker();
}